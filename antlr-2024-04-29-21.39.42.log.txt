2024-04-29 21:39:40:898 grammar LogManager.java:25 before: (COMBINED_GRAMMAR MontyPython (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT progline))) EOF))) (RULE progline (BLOCK (ALT stat) (ALT def))) (RULE stat (BLOCK (ALT declaration) (ALT assignment) (ALT whilecycle) (ALT ifthenelse) (ALT forin) (ALT funcheader) (ALT funcreturn) (ALT printstat) (ALT fladd) (ALT flremove))) (RULE assignment (BLOCK (ALT (BLOCK (ALT ID) (ALT IDellista)) '=' (BLOCK (ALT expr) (ALT tlistint) (ALT tlistfloat) (ALT inputline))))) (RULE declaration (BLOCK (ALT 'int' (BLOCK (ALT (BLOCK (ALT ID))) (ALT (BLOCK (ALT ID '=' (BLOCK (ALT expr) (ALT inputline)))))) (* (BLOCK (ALT (BLOCK (ALT ',' ID))) (ALT (BLOCK (ALT ',' ID '=' expr)))))) (ALT 'float' (BLOCK (ALT (BLOCK (ALT ID))) (ALT (BLOCK (ALT ID '=' expr)))) (* (BLOCK (ALT (BLOCK (ALT ',' ID))) (ALT (BLOCK (ALT ',' ID '=' expr)))))) (ALT (BLOCK (ALT (BLOCK (ALT ID))) (ALT (BLOCK (ALT ID '=' expr)))) (* (BLOCK (ALT (BLOCK (ALT ',' ID))) (ALT (BLOCK (ALT ',' ID '=' expr)))))) (ALT 'int' '[' ']' (BLOCK (ALT ID) (ALT (BLOCK (ALT ID '=' tlistint))))) (ALT 'float' '[' ']' (BLOCK (ALT ID) (ALT (BLOCK (ALT ID '=' tlistfloat))))))) (RULE deftipo (BLOCK (ALT (BLOCK (ALT 'int') (ALT 'float')) (? (BLOCK (ALT '[' ']')))))) (RULE funcheader (BLOCK (ALT 'def' (? (BLOCK (ALT deftipo))) ID '(' (? (BLOCK (ALT (? (BLOCK (ALT deftipo))) ID (* (BLOCK (ALT ',' (? (BLOCK (ALT deftipo))) ID)))))) ')' ':'))) (RULE funcreturn (BLOCK (ALT 'return' expr))) (RULE def (BLOCK (ALT ID '(' ID (* (BLOCK (ALT ',' ID))) ')' '{' (* (BLOCK (ALT stat))) '}'))) (RULE whilecycle (BLOCK (ALT 'while' exprlogic ':' (* (BLOCK (ALT stat)))) (ALT 'while' exprlogic ':' (* (BLOCK (ALT stat))) 'else' ':' (* (BLOCK (ALT stat)))))) (RULE ifthenelse (BLOCK (ALT 'if' exprlogic ':' (* (BLOCK (ALT stat)))) (ALT 'if' exprlogic ':' (* (BLOCK (ALT stat))) (* (BLOCK (ALT 'elif' exprlogic ':' (* (BLOCK (ALT stat))))))) (ALT 'if' exprlogic ':' (* (BLOCK (ALT stat))) (* (BLOCK (ALT 'elif' exprlogic ':' (* (BLOCK (ALT stat)))))) 'else' ':' (* (BLOCK (ALT stat)))))) (RULE forin (BLOCK (ALT 'for' ID 'in' tlistint ':' (* (BLOCK (ALT stat)))) (ALT 'for' ID 'in' trange ':' (* (BLOCK (ALT stat)))))) (RULE tlistint (BLOCK (ALT ID) (ALT '[' ']') (ALT '[' INT (* (BLOCK (ALT ',' INT))) ']'))) (RULE tlistfloat (BLOCK (ALT ID) (ALT '[' ']') (ALT '[' (BLOCK (ALT INT) (ALT FLOAT)) (* (BLOCK (ALT ',' (BLOCK (ALT INT) (ALT FLOAT))))) ']'))) (RULE IDellista (BLOCK (ALT ID '[' (BLOCK (ALT ID) (ALT INT)) ']'))) (RULE flsize (BLOCK (ALT 'size' '(' (BLOCK (ALT ID) (ALT tlistint) (ALT tlistfloat)) ')'))) (RULE fladd (BLOCK (ALT 'add' '(' ID ',' expr ',' expr ')'))) (RULE flremove (BLOCK (ALT 'remove' '(' ID ',' expr ')'))) (RULE inputline (BLOCK (ALT 'input' '(' (? (BLOCK (ALT STRING))) ')'))) (RULE printstat (BLOCK (ALT 'print' '(' (BLOCK (ALT expr) (ALT STRING)) (* (BLOCK (ALT ',' (BLOCK (ALT expr) (ALT STRING))))) ')'))) (RULE trange (BLOCK (ALT 'range' '(' (BLOCK (ALT ID) (ALT INT)) ')') (ALT 'range' '(' (BLOCK (ALT ID) (ALT INT)) ',' (BLOCK (ALT ID) (ALT INT)) ')') (ALT 'range' '(' (BLOCK (ALT ID) (ALT INT)) ',' (BLOCK (ALT ID) (ALT INT)) ',' (BLOCK (ALT ID) (ALT INT)) ')'))) (RULE expr (BLOCK (ALT ID) (ALT IDellista) (ALT INT) (ALT FLOAT) (ALT flsize) (ALT func) (ALT '(' expr ')') (ALT expr '**' expr) (ALT expr '*' expr) (ALT expr '/' expr) (ALT expr '//' expr) (ALT expr '%' expr) (ALT expr '+' expr) (ALT expr '-' expr) (ALT ID) (ALT INT) (ALT FLOAT) (ALT func) (ALT '(' expr ')'))) (RULE exprlogic (BLOCK (ALT ID) (ALT INT) (ALT FLOAT) (ALT func) (ALT 'not' exprlogic) (ALT '(' expr ')') (ALT exprlogic 'and' exprlogic) (ALT exprlogic 'or' exprlogic) (ALT expr '<' expr) (ALT expr '<=' expr) (ALT expr '>' expr) (ALT expr '>=' expr) (ALT expr '==' expr) (ALT expr '!=' expr))) (RULE func (BLOCK (ALT ID '(' expr (* (BLOCK (ALT ',' expr))) ')'))) (RULE AND (BLOCK (ALT 'and'))) (RULE OR (BLOCK (ALT 'or'))) (RULE NOT (BLOCK (ALT 'not'))) (RULE EQ (BLOCK (ALT '='))) (RULE COMMA (BLOCK (ALT ','))) (RULE SEMI (BLOCK (ALT ';'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE LCURLY (BLOCK (ALT '{'))) (RULE RCURLY (BLOCK (ALT '}'))) (RULE LSQUARE (BLOCK (ALT '['))) (RULE RSQUARE (BLOCK (ALT ']'))) (RULE TWOPOINTS (BLOCK (ALT ':'))) (RULE EXP (BLOCK (ALT '**'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE IDIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE SUM (BLOCK (ALT '+'))) (RULE SUBT (BLOCK (ALT '-'))) (RULE LESS (BLOCK (ALT '<'))) (RULE LESSEQ (BLOCK (ALT '<='))) (RULE BIGG (BLOCK (ALT '>'))) (RULE BIGGEQ (BLOCK (ALT '>='))) (RULE EQUAL (BLOCK (ALT '=='))) (RULE DIFF (BLOCK (ALT '!='))) (RULE DINT (BLOCK (ALT 'int'))) (RULE DFLOAT (BLOCK (ALT 'float'))) (RULE INPUT (BLOCK (ALT 'input'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELIF (BLOCK (ALT 'elif'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGE (BLOCK (ALT 'range'))) (RULE DEF (BLOCK (ALT 'def'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE LSIZE (BLOCK (ALT 'size'))) (RULE LADD (BLOCK (ALT 'add'))) (RULE LREMOVE (BLOCK (ALT 'remove'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT (? (BLOCK (ALT [.]))) (+ (BLOCK (ALT [0-9])))))) (? (BLOCK (ALT [eE] (? (BLOCK (ALT [+-]))) (+ (BLOCK (ALT [0-9]))))))))) (RULE MMENOS (BLOCK (ALT [+-]))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT .))) '"'))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z_0-9])))))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '#' (* (BLOCK (ALT .))) (? (BLOCK (ALT '\r'))) '\n') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\n\r\f])))) skip)))))
2024-04-29 21:39:40:963 grammar LogManager.java:25 after: (COMBINED_GRAMMAR MontyPython (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT progline))) EOF))) (RULE progline (BLOCK (ALT stat) (ALT def))) (RULE stat (BLOCK (ALT declaration) (ALT assignment) (ALT whilecycle) (ALT ifthenelse) (ALT forin) (ALT funcheader) (ALT funcreturn) (ALT printstat) (ALT fladd) (ALT flremove))) (RULE assignment (BLOCK (ALT (SET ID IDellista) '=' (BLOCK (ALT expr) (ALT tlistint) (ALT tlistfloat) (ALT inputline))))) (RULE declaration (BLOCK (ALT 'int' (BLOCK (ALT (BLOCK (ALT ID))) (ALT (BLOCK (ALT ID '=' (BLOCK (ALT expr) (ALT inputline)))))) (* (BLOCK (ALT (BLOCK (ALT ',' ID))) (ALT (BLOCK (ALT ',' ID '=' expr)))))) (ALT 'float' (BLOCK (ALT (BLOCK (ALT ID))) (ALT (BLOCK (ALT ID '=' expr)))) (* (BLOCK (ALT (BLOCK (ALT ',' ID))) (ALT (BLOCK (ALT ',' ID '=' expr)))))) (ALT (BLOCK (ALT (BLOCK (ALT ID))) (ALT (BLOCK (ALT ID '=' expr)))) (* (BLOCK (ALT (BLOCK (ALT ',' ID))) (ALT (BLOCK (ALT ',' ID '=' expr)))))) (ALT 'int' '[' ']' (BLOCK (ALT ID) (ALT (BLOCK (ALT ID '=' tlistint))))) (ALT 'float' '[' ']' (BLOCK (ALT ID) (ALT (BLOCK (ALT ID '=' tlistfloat))))))) (RULE deftipo (BLOCK (ALT (SET 'int' 'float') (? (BLOCK (ALT '[' ']')))))) (RULE funcheader (BLOCK (ALT 'def' (? (BLOCK (ALT deftipo))) ID '(' (? (BLOCK (ALT (? (BLOCK (ALT deftipo))) ID (* (BLOCK (ALT ',' (? (BLOCK (ALT deftipo))) ID)))))) ')' ':'))) (RULE funcreturn (BLOCK (ALT 'return' expr))) (RULE def (BLOCK (ALT ID '(' ID (* (BLOCK (ALT ',' ID))) ')' '{' (* (BLOCK (ALT stat))) '}'))) (RULE whilecycle (BLOCK (ALT 'while' exprlogic ':' (* (BLOCK (ALT stat)))) (ALT 'while' exprlogic ':' (* (BLOCK (ALT stat))) 'else' ':' (* (BLOCK (ALT stat)))))) (RULE ifthenelse (BLOCK (ALT 'if' exprlogic ':' (* (BLOCK (ALT stat)))) (ALT 'if' exprlogic ':' (* (BLOCK (ALT stat))) (* (BLOCK (ALT 'elif' exprlogic ':' (* (BLOCK (ALT stat))))))) (ALT 'if' exprlogic ':' (* (BLOCK (ALT stat))) (* (BLOCK (ALT 'elif' exprlogic ':' (* (BLOCK (ALT stat)))))) 'else' ':' (* (BLOCK (ALT stat)))))) (RULE forin (BLOCK (ALT 'for' ID 'in' tlistint ':' (* (BLOCK (ALT stat)))) (ALT 'for' ID 'in' trange ':' (* (BLOCK (ALT stat)))))) (RULE tlistint (BLOCK (ALT ID) (ALT '[' ']') (ALT '[' INT (* (BLOCK (ALT ',' INT))) ']'))) (RULE tlistfloat (BLOCK (ALT ID) (ALT '[' ']') (ALT '[' (SET INT FLOAT) (* (BLOCK (ALT ',' (SET INT FLOAT)))) ']'))) (RULE IDellista (BLOCK (ALT ID '[' (BLOCK (ALT ID) (ALT INT)) ']'))) (RULE flsize (BLOCK (ALT 'size' '(' (BLOCK (ALT ID) (ALT tlistint) (ALT tlistfloat)) ')'))) (RULE fladd (BLOCK (ALT 'add' '(' ID ',' expr ',' expr ')'))) (RULE flremove (BLOCK (ALT 'remove' '(' ID ',' expr ')'))) (RULE inputline (BLOCK (ALT 'input' '(' (? (BLOCK (ALT STRING))) ')'))) (RULE printstat (BLOCK (ALT 'print' '(' (BLOCK (ALT expr) (ALT STRING)) (* (BLOCK (ALT ',' (BLOCK (ALT expr) (ALT STRING))))) ')'))) (RULE trange (BLOCK (ALT 'range' '(' (SET ID INT) ')') (ALT 'range' '(' (SET ID INT) ',' (SET ID INT) ')') (ALT 'range' '(' (SET ID INT) ',' (SET ID INT) ',' (SET ID INT) ')'))) (RULE expr (BLOCK (ALT ID) (ALT IDellista) (ALT INT) (ALT FLOAT) (ALT flsize) (ALT func) (ALT '(' expr ')') (ALT expr '**' expr) (ALT expr '*' expr) (ALT expr '/' expr) (ALT expr '//' expr) (ALT expr '%' expr) (ALT expr '+' expr) (ALT expr '-' expr) (ALT ID) (ALT INT) (ALT FLOAT) (ALT func) (ALT '(' expr ')'))) (RULE exprlogic (BLOCK (ALT ID) (ALT INT) (ALT FLOAT) (ALT func) (ALT 'not' exprlogic) (ALT '(' expr ')') (ALT exprlogic 'and' exprlogic) (ALT exprlogic 'or' exprlogic) (ALT expr '<' expr) (ALT expr '<=' expr) (ALT expr '>' expr) (ALT expr '>=' expr) (ALT expr '==' expr) (ALT expr '!=' expr))) (RULE func (BLOCK (ALT ID '(' expr (* (BLOCK (ALT ',' expr))) ')'))) (RULE AND (BLOCK (ALT 'and'))) (RULE OR (BLOCK (ALT 'or'))) (RULE NOT (BLOCK (ALT 'not'))) (RULE EQ (BLOCK (ALT '='))) (RULE COMMA (BLOCK (ALT ','))) (RULE SEMI (BLOCK (ALT ';'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE LCURLY (BLOCK (ALT '{'))) (RULE RCURLY (BLOCK (ALT '}'))) (RULE LSQUARE (BLOCK (ALT '['))) (RULE RSQUARE (BLOCK (ALT ']'))) (RULE TWOPOINTS (BLOCK (ALT ':'))) (RULE EXP (BLOCK (ALT '**'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE IDIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE SUM (BLOCK (ALT '+'))) (RULE SUBT (BLOCK (ALT '-'))) (RULE LESS (BLOCK (ALT '<'))) (RULE LESSEQ (BLOCK (ALT '<='))) (RULE BIGG (BLOCK (ALT '>'))) (RULE BIGGEQ (BLOCK (ALT '>='))) (RULE EQUAL (BLOCK (ALT '=='))) (RULE DIFF (BLOCK (ALT '!='))) (RULE DINT (BLOCK (ALT 'int'))) (RULE DFLOAT (BLOCK (ALT 'float'))) (RULE INPUT (BLOCK (ALT 'input'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELIF (BLOCK (ALT 'elif'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGE (BLOCK (ALT 'range'))) (RULE DEF (BLOCK (ALT 'def'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE LSIZE (BLOCK (ALT 'size'))) (RULE LADD (BLOCK (ALT 'add'))) (RULE LREMOVE (BLOCK (ALT 'remove'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT (? (BLOCK (ALT [.]))) (+ (BLOCK (ALT [0-9])))))) (? (BLOCK (ALT [eE] (? (BLOCK (ALT [+-]))) (+ (BLOCK (ALT [0-9]))))))))) (RULE MMENOS (BLOCK (ALT [+-]))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT .))) '"'))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z_0-9])))))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '#' (* (BLOCK (ALT .))) (? (BLOCK (ALT '\r'))) '\n') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\n\r\f])))) skip)))))
2024-04-29 21:39:41:053 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR MontyPython (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT progline))) EOF))) (RULE progline (BLOCK (ALT stat) (ALT def))) (RULE stat (BLOCK (ALT declaration) (ALT assignment) (ALT whilecycle) (ALT ifthenelse) (ALT forin) (ALT funcheader) (ALT funcreturn) (ALT printstat) (ALT fladd) (ALT flremove))) (RULE assignment (BLOCK (ALT (SET ID IDellista) '=' (BLOCK (ALT expr) (ALT tlistint) (ALT tlistfloat) (ALT inputline))))) (RULE declaration (BLOCK (ALT 'int' (BLOCK (ALT (BLOCK (ALT ID))) (ALT (BLOCK (ALT ID '=' (BLOCK (ALT expr) (ALT inputline)))))) (* (BLOCK (ALT (BLOCK (ALT ',' ID))) (ALT (BLOCK (ALT ',' ID '=' expr)))))) (ALT 'float' (BLOCK (ALT (BLOCK (ALT ID))) (ALT (BLOCK (ALT ID '=' expr)))) (* (BLOCK (ALT (BLOCK (ALT ',' ID))) (ALT (BLOCK (ALT ',' ID '=' expr)))))) (ALT (BLOCK (ALT (BLOCK (ALT ID))) (ALT (BLOCK (ALT ID '=' expr)))) (* (BLOCK (ALT (BLOCK (ALT ',' ID))) (ALT (BLOCK (ALT ',' ID '=' expr)))))) (ALT 'int' '[' ']' (BLOCK (ALT ID) (ALT (BLOCK (ALT ID '=' tlistint))))) (ALT 'float' '[' ']' (BLOCK (ALT ID) (ALT (BLOCK (ALT ID '=' tlistfloat))))))) (RULE deftipo (BLOCK (ALT (SET 'int' 'float') (? (BLOCK (ALT '[' ']')))))) (RULE funcheader (BLOCK (ALT 'def' (? (BLOCK (ALT deftipo))) ID '(' (? (BLOCK (ALT (? (BLOCK (ALT deftipo))) ID (* (BLOCK (ALT ',' (? (BLOCK (ALT deftipo))) ID)))))) ')' ':'))) (RULE funcreturn (BLOCK (ALT 'return' expr))) (RULE def (BLOCK (ALT ID '(' ID (* (BLOCK (ALT ',' ID))) ')' '{' (* (BLOCK (ALT stat))) '}'))) (RULE whilecycle (BLOCK (ALT 'while' exprlogic ':' (* (BLOCK (ALT stat)))) (ALT 'while' exprlogic ':' (* (BLOCK (ALT stat))) 'else' ':' (* (BLOCK (ALT stat)))))) (RULE ifthenelse (BLOCK (ALT 'if' exprlogic ':' (* (BLOCK (ALT stat)))) (ALT 'if' exprlogic ':' (* (BLOCK (ALT stat))) (* (BLOCK (ALT 'elif' exprlogic ':' (* (BLOCK (ALT stat))))))) (ALT 'if' exprlogic ':' (* (BLOCK (ALT stat))) (* (BLOCK (ALT 'elif' exprlogic ':' (* (BLOCK (ALT stat)))))) 'else' ':' (* (BLOCK (ALT stat)))))) (RULE forin (BLOCK (ALT 'for' ID 'in' tlistint ':' (* (BLOCK (ALT stat)))) (ALT 'for' ID 'in' trange ':' (* (BLOCK (ALT stat)))))) (RULE tlistint (BLOCK (ALT ID) (ALT '[' ']') (ALT '[' INT (* (BLOCK (ALT ',' INT))) ']'))) (RULE tlistfloat (BLOCK (ALT ID) (ALT '[' ']') (ALT '[' (SET INT FLOAT) (* (BLOCK (ALT ',' (SET INT FLOAT)))) ']'))) (RULE flsize (BLOCK (ALT 'size' '(' (BLOCK (ALT ID) (ALT tlistint) (ALT tlistfloat)) ')'))) (RULE fladd (BLOCK (ALT 'add' '(' ID ',' expr ',' expr ')'))) (RULE flremove (BLOCK (ALT 'remove' '(' ID ',' expr ')'))) (RULE inputline (BLOCK (ALT 'input' '(' (? (BLOCK (ALT STRING))) ')'))) (RULE printstat (BLOCK (ALT 'print' '(' (BLOCK (ALT expr) (ALT STRING)) (* (BLOCK (ALT ',' (BLOCK (ALT expr) (ALT STRING))))) ')'))) (RULE trange (BLOCK (ALT 'range' '(' (SET ID INT) ')') (ALT 'range' '(' (SET ID INT) ',' (SET ID INT) ')') (ALT 'range' '(' (SET ID INT) ',' (SET ID INT) ',' (SET ID INT) ')'))) (RULE expr (BLOCK (ALT ID) (ALT IDellista) (ALT INT) (ALT FLOAT) (ALT flsize) (ALT func) (ALT '(' expr ')') (ALT expr '**' expr) (ALT expr '*' expr) (ALT expr '/' expr) (ALT expr '//' expr) (ALT expr '%' expr) (ALT expr '+' expr) (ALT expr '-' expr) (ALT ID) (ALT INT) (ALT FLOAT) (ALT func) (ALT '(' expr ')'))) (RULE exprlogic (BLOCK (ALT ID) (ALT INT) (ALT FLOAT) (ALT func) (ALT 'not' exprlogic) (ALT '(' expr ')') (ALT exprlogic 'and' exprlogic) (ALT exprlogic 'or' exprlogic) (ALT expr '<' expr) (ALT expr '<=' expr) (ALT expr '>' expr) (ALT expr '>=' expr) (ALT expr '==' expr) (ALT expr '!=' expr))) (RULE func (BLOCK (ALT ID '(' expr (* (BLOCK (ALT ',' expr))) ')')))))
2024-04-29 21:39:41:054 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR MontyPythonLexer (RULES (RULE IDellista (BLOCK (ALT ID '[' (BLOCK (ALT ID) (ALT INT)) ']'))) (RULE AND (BLOCK (ALT 'and'))) (RULE OR (BLOCK (ALT 'or'))) (RULE NOT (BLOCK (ALT 'not'))) (RULE EQ (BLOCK (ALT '='))) (RULE COMMA (BLOCK (ALT ','))) (RULE SEMI (BLOCK (ALT ';'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE LCURLY (BLOCK (ALT '{'))) (RULE RCURLY (BLOCK (ALT '}'))) (RULE LSQUARE (BLOCK (ALT '['))) (RULE RSQUARE (BLOCK (ALT ']'))) (RULE TWOPOINTS (BLOCK (ALT ':'))) (RULE EXP (BLOCK (ALT '**'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE IDIV (BLOCK (ALT '//'))) (RULE MOD (BLOCK (ALT '%'))) (RULE SUM (BLOCK (ALT '+'))) (RULE SUBT (BLOCK (ALT '-'))) (RULE LESS (BLOCK (ALT '<'))) (RULE LESSEQ (BLOCK (ALT '<='))) (RULE BIGG (BLOCK (ALT '>'))) (RULE BIGGEQ (BLOCK (ALT '>='))) (RULE EQUAL (BLOCK (ALT '=='))) (RULE DIFF (BLOCK (ALT '!='))) (RULE DINT (BLOCK (ALT 'int'))) (RULE DFLOAT (BLOCK (ALT 'float'))) (RULE INPUT (BLOCK (ALT 'input'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELIF (BLOCK (ALT 'elif'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGE (BLOCK (ALT 'range'))) (RULE DEF (BLOCK (ALT 'def'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE LSIZE (BLOCK (ALT 'size'))) (RULE LADD (BLOCK (ALT 'add'))) (RULE LREMOVE (BLOCK (ALT 'remove'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT (? (BLOCK (ALT [.]))) (+ (BLOCK (ALT [0-9])))))) (? (BLOCK (ALT [eE] (? (BLOCK (ALT [+-]))) (+ (BLOCK (ALT [0-9]))))))))) (RULE MMENOS (BLOCK (ALT [+-]))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT .))) '"'))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z_0-9])))))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '#' (* (BLOCK (ALT .))) (? (BLOCK (ALT '\r'))) '\n') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\n\r\f])))) skip)))))
2024-04-29 21:39:41:845 left-recursion LogManager.java:25 expr
    :   ( {} ID<tokenIndex=702> 
        | IDellista<tokenIndex=706> 
        | INT<tokenIndex=710> 
        | FLOAT<tokenIndex=714> 
        | flsize<tokenIndex=718> 
        | func<tokenIndex=722> 
        | '('<tokenIndex=726> expr<tokenIndex=728> ')'<tokenIndex=730> 
        | ID<tokenIndex=776> 
        | INT<tokenIndex=778> 
        | FLOAT<tokenIndex=780> 
        | func<tokenIndex=782> 
        | '('<tokenIndex=785> expr<tokenIndex=787> ')'<tokenIndex=789> 
        )
        (
          {precpred(_ctx, 12)}?<p=12> '**'<tokenIndex=735>expr<tokenIndex=736,p=13>
                  | {precpred(_ctx, 11)}?<p=11> '*'<tokenIndex=741>expr<tokenIndex=742,p=12>
                  | {precpred(_ctx, 10)}?<p=10> '/'<tokenIndex=747>expr<tokenIndex=748,p=11>
                  | {precpred(_ctx, 9)}?<p=9> '//'<tokenIndex=753>expr<tokenIndex=754,p=10>
                  | {precpred(_ctx, 8)}?<p=8> '%'<tokenIndex=759>expr<tokenIndex=760,p=9>
                  | {precpred(_ctx, 7)}?<p=7> '+'<tokenIndex=765>expr<tokenIndex=766,p=8>
                  | {precpred(_ctx, 6)}?<p=6> '-'<tokenIndex=771>expr<tokenIndex=772,p=7>
        )*
    ;
2024-04-29 21:39:41:879 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 702)))) (ALT (IDellista (ELEMENT_OPTIONS (= tokenIndex 706)))) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 710)))) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 714)))) (ALT (flsize (ELEMENT_OPTIONS (= tokenIndex 718)))) (ALT (func (ELEMENT_OPTIONS (= tokenIndex 722)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 726))) (expr (ELEMENT_OPTIONS (= tokenIndex 728))) (')' (ELEMENT_OPTIONS (= tokenIndex 730)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 776)))) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 778)))) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 780)))) (ALT (func (ELEMENT_OPTIONS (= tokenIndex 782)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 785))) (expr (ELEMENT_OPTIONS (= tokenIndex 787))) (')' (ELEMENT_OPTIONS (= tokenIndex 789))))) (* (BLOCK (ALT ({precpred(_ctx, 12)}? (ELEMENT_OPTIONS (= p 12))) ('**' (ELEMENT_OPTIONS (= tokenIndex 735))) (expr (ELEMENT_OPTIONS (= tokenIndex 736) (= p 13)))) (ALT ({precpred(_ctx, 11)}? (ELEMENT_OPTIONS (= p 11))) ('*' (ELEMENT_OPTIONS (= tokenIndex 741))) (expr (ELEMENT_OPTIONS (= tokenIndex 742) (= p 12)))) (ALT ({precpred(_ctx, 10)}? (ELEMENT_OPTIONS (= p 10))) ('/' (ELEMENT_OPTIONS (= tokenIndex 747))) (expr (ELEMENT_OPTIONS (= tokenIndex 748) (= p 11)))) (ALT ({precpred(_ctx, 9)}? (ELEMENT_OPTIONS (= p 9))) ('//' (ELEMENT_OPTIONS (= tokenIndex 753))) (expr (ELEMENT_OPTIONS (= tokenIndex 754) (= p 10)))) (ALT ({precpred(_ctx, 8)}? (ELEMENT_OPTIONS (= p 8))) ('%' (ELEMENT_OPTIONS (= tokenIndex 759))) (expr (ELEMENT_OPTIONS (= tokenIndex 760) (= p 9)))) (ALT ({precpred(_ctx, 7)}? (ELEMENT_OPTIONS (= p 7))) ('+' (ELEMENT_OPTIONS (= tokenIndex 765))) (expr (ELEMENT_OPTIONS (= tokenIndex 766) (= p 8)))) (ALT ({precpred(_ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) ('-' (ELEMENT_OPTIONS (= tokenIndex 771))) (expr (ELEMENT_OPTIONS (= tokenIndex 772) (= p 7)))))))))
2024-04-29 21:39:41:884 left-recursion LogManager.java:25 exprlogic
    :   ( {} ID<tokenIndex=796> 
        | INT<tokenIndex=800> 
        | FLOAT<tokenIndex=804> 
        | func<tokenIndex=808> 
        | 'not'<tokenIndex=812>exprlogic<tokenIndex=813,p=10> 
        | '('<tokenIndex=817>expr<tokenIndex=818>')'<tokenIndex=819> 
        | expr<tokenIndex=835>'<'<tokenIndex=836>expr<tokenIndex=837> 
        | expr<tokenIndex=841>'<='<tokenIndex=842>expr<tokenIndex=843> 
        | expr<tokenIndex=847>'>'<tokenIndex=848>expr<tokenIndex=849> 
        | expr<tokenIndex=853>'>='<tokenIndex=854>expr<tokenIndex=855> 
        | expr<tokenIndex=859>'=='<tokenIndex=860>expr<tokenIndex=861> 
        | expr<tokenIndex=865>'!='<tokenIndex=866>expr<tokenIndex=867> 
        )
        (
          {precpred(_ctx, 8)}?<p=8> 'and'<tokenIndex=824>exprlogic<tokenIndex=825,p=9>
                  | {precpred(_ctx, 7)}?<p=7> 'or'<tokenIndex=830>exprlogic<tokenIndex=831,p=8>
        )*
    ;
2024-04-29 21:39:41:913 grammar LogManager.java:25 added: (RULE exprlogic (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 796)))) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 800)))) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 804)))) (ALT (func (ELEMENT_OPTIONS (= tokenIndex 808)))) (ALT ('not' (ELEMENT_OPTIONS (= tokenIndex 812))) (exprlogic (ELEMENT_OPTIONS (= tokenIndex 813) (= p 10)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 817))) (expr (ELEMENT_OPTIONS (= tokenIndex 818))) (')' (ELEMENT_OPTIONS (= tokenIndex 819)))) (ALT (expr (ELEMENT_OPTIONS (= tokenIndex 835))) ('<' (ELEMENT_OPTIONS (= tokenIndex 836))) (expr (ELEMENT_OPTIONS (= tokenIndex 837)))) (ALT (expr (ELEMENT_OPTIONS (= tokenIndex 841))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 842))) (expr (ELEMENT_OPTIONS (= tokenIndex 843)))) (ALT (expr (ELEMENT_OPTIONS (= tokenIndex 847))) ('>' (ELEMENT_OPTIONS (= tokenIndex 848))) (expr (ELEMENT_OPTIONS (= tokenIndex 849)))) (ALT (expr (ELEMENT_OPTIONS (= tokenIndex 853))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 854))) (expr (ELEMENT_OPTIONS (= tokenIndex 855)))) (ALT (expr (ELEMENT_OPTIONS (= tokenIndex 859))) ('==' (ELEMENT_OPTIONS (= tokenIndex 860))) (expr (ELEMENT_OPTIONS (= tokenIndex 861)))) (ALT (expr (ELEMENT_OPTIONS (= tokenIndex 865))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 866))) (expr (ELEMENT_OPTIONS (= tokenIndex 867))))) (* (BLOCK (ALT ({precpred(_ctx, 8)}? (ELEMENT_OPTIONS (= p 8))) ('and' (ELEMENT_OPTIONS (= tokenIndex 824))) (exprlogic (ELEMENT_OPTIONS (= tokenIndex 825) (= p 9)))) (ALT ({precpred(_ctx, 7)}? (ELEMENT_OPTIONS (= p 7))) ('or' (ELEMENT_OPTIONS (= tokenIndex 830))) (exprlogic (ELEMENT_OPTIONS (= tokenIndex 831) (= p 8)))))))))
2024-04-29 21:39:41:923 semantics LogManager.java:25 tokens={EOF=-1, IDellista=1, AND=2, OR=3, NOT=4, EQ=5, COMMA=6, SEMI=7, LPAREN=8, RPAREN=9, LCURLY=10, RCURLY=11, LSQUARE=12, RSQUARE=13, TWOPOINTS=14, EXP=15, MULT=16, DIV=17, IDIV=18, MOD=19, SUM=20, SUBT=21, LESS=22, LESSEQ=23, BIGG=24, BIGGEQ=25, EQUAL=26, DIFF=27, DINT=28, DFLOAT=29, INPUT=30, PRINT=31, WHILE=32, IF=33, ELIF=34, ELSE=35, FOR=36, IN=37, RANGE=38, DEF=39, RETURN=40, LSIZE=41, LADD=42, LREMOVE=43, INT=44, FLOAT=45, MMENOS=46, STRING=47, ID=48, COMMENT=49, WS=50}
2024-04-29 21:39:41:923 semantics LogManager.java:25 strings={'and'=2, 'or'=3, 'not'=4, '='=5, ','=6, ';'=7, '('=8, ')'=9, '{'=10, '}'=11, '['=12, ']'=13, ':'=14, '**'=15, '*'=16, '/'=17, '//'=18, '%'=19, '+'=20, '-'=21, '<'=22, '<='=23, '>'=24, '>='=25, '=='=26, '!='=27, 'int'=28, 'float'=29, 'input'=30, 'print'=31, 'while'=32, 'if'=33, 'elif'=34, 'else'=35, 'for'=36, 'in'=37, 'range'=38, 'def'=39, 'return'=40, 'size'=41, 'add'=42, 'remove'=43}
2024-04-29 21:39:41:980 LL1 LogManager.java:25 
DECISION 0 in rule program
2024-04-29 21:39:41:982 LL1 LogManager.java:25 look=[{1, 28..29, 31..33, 36, 39..40, 42..43, 48}, <EOF>]
2024-04-29 21:39:41:984 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:41:984 LL1 LogManager.java:25 
DECISION 1 in rule progline
2024-04-29 21:39:41:985 LL1 LogManager.java:25 look=[{1, 28..29, 31..33, 36, 39..40, 42..43, 48}, 48]
2024-04-29 21:39:41:985 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:41:985 LL1 LogManager.java:25 
DECISION 2 in rule stat
2024-04-29 21:39:41:985 LL1 LogManager.java:25 look=[{28..29, 48}, {1, 48}, 32, 33, 36, 39, 40, 31, 42, 43]
2024-04-29 21:39:41:986 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:41:986 LL1 LogManager.java:25 
DECISION 3 in rule assignment
2024-04-29 21:39:41:986 LL1 LogManager.java:25 look=[{1, 8, 41, 44..45, 48}, {12, 48}, {12, 48}, 30]
2024-04-29 21:39:41:986 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:41:986 LL1 LogManager.java:25 
DECISION 4 in rule declaration
2024-04-29 21:39:41:986 LL1 LogManager.java:25 look=[{1, 8, 41, 44..45, 48}, 30]
2024-04-29 21:39:41:986 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:41:987 LL1 LogManager.java:25 
DECISION 5 in rule declaration
2024-04-29 21:39:41:987 LL1 LogManager.java:25 look=[48, 48]
2024-04-29 21:39:41:987 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:41:987 LL1 LogManager.java:25 
DECISION 6 in rule declaration
2024-04-29 21:39:41:987 LL1 LogManager.java:25 look=[6, 6]
2024-04-29 21:39:41:987 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:41:987 LL1 LogManager.java:25 
DECISION 7 in rule declaration
2024-04-29 21:39:41:989 LL1 LogManager.java:25 look=[6, {<EOF>, 1, 11, 28..29, 31..36, 39..40, 42..43, 48}]
2024-04-29 21:39:41:989 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:41:989 LL1 LogManager.java:25 
DECISION 8 in rule declaration
2024-04-29 21:39:41:990 LL1 LogManager.java:25 look=[48, 48]
2024-04-29 21:39:41:990 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:41:990 LL1 LogManager.java:25 
DECISION 9 in rule declaration
2024-04-29 21:39:41:990 LL1 LogManager.java:25 look=[6, 6]
2024-04-29 21:39:41:990 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:41:990 LL1 LogManager.java:25 
DECISION 10 in rule declaration
2024-04-29 21:39:41:993 LL1 LogManager.java:25 look=[6, {<EOF>, 1, 11, 28..29, 31..36, 39..40, 42..43, 48}]
2024-04-29 21:39:41:993 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:41:994 LL1 LogManager.java:25 
DECISION 11 in rule declaration
2024-04-29 21:39:41:994 LL1 LogManager.java:25 look=[48, 48]
2024-04-29 21:39:41:994 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:41:994 LL1 LogManager.java:25 
DECISION 12 in rule declaration
2024-04-29 21:39:41:994 LL1 LogManager.java:25 look=[6, 6]
2024-04-29 21:39:41:994 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:41:994 LL1 LogManager.java:25 
DECISION 13 in rule declaration
2024-04-29 21:39:41:996 LL1 LogManager.java:25 look=[6, {<EOF>, 1, 11, 28..29, 31..36, 39..40, 42..43, 48}]
2024-04-29 21:39:41:996 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:41:996 LL1 LogManager.java:25 
DECISION 14 in rule declaration
2024-04-29 21:39:41:996 LL1 LogManager.java:25 look=[48, 48]
2024-04-29 21:39:41:996 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:41:996 LL1 LogManager.java:25 
DECISION 15 in rule declaration
2024-04-29 21:39:41:996 LL1 LogManager.java:25 look=[48, 48]
2024-04-29 21:39:41:996 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:41:997 LL1 LogManager.java:25 
DECISION 16 in rule declaration
2024-04-29 21:39:41:997 LL1 LogManager.java:25 look=[28, 29, 48, 28, 29]
2024-04-29 21:39:41:997 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:41:997 LL1 LogManager.java:25 
DECISION 17 in rule deftipo
2024-04-29 21:39:41:997 LL1 LogManager.java:25 look=[12, 48]
2024-04-29 21:39:41:997 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:41:997 LL1 LogManager.java:25 
DECISION 18 in rule funcheader
2024-04-29 21:39:41:997 LL1 LogManager.java:25 look=[{28..29}, 48]
2024-04-29 21:39:41:997 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:41:997 LL1 LogManager.java:25 
DECISION 19 in rule funcheader
2024-04-29 21:39:41:997 LL1 LogManager.java:25 look=[{28..29}, 48]
2024-04-29 21:39:41:997 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:41:997 LL1 LogManager.java:25 
DECISION 20 in rule funcheader
2024-04-29 21:39:41:997 LL1 LogManager.java:25 look=[{28..29}, 48]
2024-04-29 21:39:41:997 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:41:997 LL1 LogManager.java:25 
DECISION 21 in rule funcheader
2024-04-29 21:39:41:997 LL1 LogManager.java:25 look=[6, 9]
2024-04-29 21:39:41:997 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:41:997 LL1 LogManager.java:25 
DECISION 22 in rule funcheader
2024-04-29 21:39:41:998 LL1 LogManager.java:25 look=[{28..29, 48}, 9]
2024-04-29 21:39:41:998 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:41:998 LL1 LogManager.java:25 
DECISION 23 in rule def
2024-04-29 21:39:41:998 LL1 LogManager.java:25 look=[6, 9]
2024-04-29 21:39:41:998 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:41:998 LL1 LogManager.java:25 
DECISION 24 in rule def
2024-04-29 21:39:41:998 LL1 LogManager.java:25 look=[{1, 28..29, 31..33, 36, 39..40, 42..43, 48}, 11]
2024-04-29 21:39:41:998 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:41:998 LL1 LogManager.java:25 
DECISION 25 in rule whilecycle
2024-04-29 21:39:41:998 LL1 LogManager.java:25 look=[{1, 28..29, 31..33, 36, 39..40, 42..43, 48}, {<EOF>, 1, 11, 28..29, 31..36, 39..40, 42..43, 48}]
2024-04-29 21:39:41:998 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:41:998 LL1 LogManager.java:25 
DECISION 26 in rule whilecycle
2024-04-29 21:39:41:998 LL1 LogManager.java:25 look=[{1, 28..29, 31..33, 36, 39..40, 42..43, 48}, 35]
2024-04-29 21:39:41:998 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:41:998 LL1 LogManager.java:25 
DECISION 27 in rule whilecycle
2024-04-29 21:39:41:999 LL1 LogManager.java:25 look=[{1, 28..29, 31..33, 36, 39..40, 42..43, 48}, {<EOF>, 1, 11, 28..29, 31..36, 39..40, 42..43, 48}]
2024-04-29 21:39:41:999 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:41:999 LL1 LogManager.java:25 
DECISION 28 in rule whilecycle
2024-04-29 21:39:41:999 LL1 LogManager.java:25 look=[32, 32]
2024-04-29 21:39:41:999 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:41:999 LL1 LogManager.java:25 
DECISION 29 in rule ifthenelse
2024-04-29 21:39:41:999 LL1 LogManager.java:25 look=[{1, 28..29, 31..33, 36, 39..40, 42..43, 48}, {<EOF>, 1, 11, 28..29, 31..36, 39..40, 42..43, 48}]
2024-04-29 21:39:42:000 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:000 LL1 LogManager.java:25 
DECISION 30 in rule ifthenelse
2024-04-29 21:39:42:001 LL1 LogManager.java:25 look=[{1, 28..29, 31..33, 36, 39..40, 42..43, 48}, {<EOF>, 1, 11, 28..29, 31..36, 39..40, 42..43, 48}]
2024-04-29 21:39:42:001 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:001 LL1 LogManager.java:25 
DECISION 31 in rule ifthenelse
2024-04-29 21:39:42:001 LL1 LogManager.java:25 look=[{1, 28..29, 31..33, 36, 39..40, 42..43, 48}, {<EOF>, 1, 11, 28..29, 31..36, 39..40, 42..43, 48}]
2024-04-29 21:39:42:001 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:001 LL1 LogManager.java:25 
DECISION 32 in rule ifthenelse
2024-04-29 21:39:42:003 LL1 LogManager.java:25 look=[34, {<EOF>, 1, 11, 28..29, 31..36, 39..40, 42..43, 48}]
2024-04-29 21:39:42:003 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:003 LL1 LogManager.java:25 
DECISION 33 in rule ifthenelse
2024-04-29 21:39:42:003 LL1 LogManager.java:25 look=[{1, 28..29, 31..33, 36, 39..40, 42..43, 48}, {34..35}]
2024-04-29 21:39:42:003 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:42:003 LL1 LogManager.java:25 
DECISION 34 in rule ifthenelse
2024-04-29 21:39:42:003 LL1 LogManager.java:25 look=[{1, 28..29, 31..33, 36, 39..40, 42..43, 48}, {34..35}]
2024-04-29 21:39:42:003 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:42:003 LL1 LogManager.java:25 
DECISION 35 in rule ifthenelse
2024-04-29 21:39:42:003 LL1 LogManager.java:25 look=[34, 35]
2024-04-29 21:39:42:003 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:42:003 LL1 LogManager.java:25 
DECISION 36 in rule ifthenelse
2024-04-29 21:39:42:004 LL1 LogManager.java:25 look=[{1, 28..29, 31..33, 36, 39..40, 42..43, 48}, {<EOF>, 1, 11, 28..29, 31..36, 39..40, 42..43, 48}]
2024-04-29 21:39:42:004 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:004 LL1 LogManager.java:25 
DECISION 37 in rule ifthenelse
2024-04-29 21:39:42:004 LL1 LogManager.java:25 look=[33, 33, 33]
2024-04-29 21:39:42:004 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:005 LL1 LogManager.java:25 
DECISION 38 in rule forin
2024-04-29 21:39:42:005 LL1 LogManager.java:25 look=[{1, 28..29, 31..33, 36, 39..40, 42..43, 48}, {<EOF>, 1, 11, 28..29, 31..36, 39..40, 42..43, 48}]
2024-04-29 21:39:42:005 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:005 LL1 LogManager.java:25 
DECISION 39 in rule forin
2024-04-29 21:39:42:006 LL1 LogManager.java:25 look=[{1, 28..29, 31..33, 36, 39..40, 42..43, 48}, {<EOF>, 1, 11, 28..29, 31..36, 39..40, 42..43, 48}]
2024-04-29 21:39:42:006 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:007 LL1 LogManager.java:25 
DECISION 40 in rule forin
2024-04-29 21:39:42:007 LL1 LogManager.java:25 look=[36, 36]
2024-04-29 21:39:42:007 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:007 LL1 LogManager.java:25 
DECISION 41 in rule tlistint
2024-04-29 21:39:42:007 LL1 LogManager.java:25 look=[6, 13]
2024-04-29 21:39:42:007 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:42:007 LL1 LogManager.java:25 
DECISION 42 in rule tlistint
2024-04-29 21:39:42:007 LL1 LogManager.java:25 look=[48, 12, 12]
2024-04-29 21:39:42:007 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:007 LL1 LogManager.java:25 
DECISION 43 in rule tlistfloat
2024-04-29 21:39:42:007 LL1 LogManager.java:25 look=[6, 13]
2024-04-29 21:39:42:007 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:42:007 LL1 LogManager.java:25 
DECISION 44 in rule tlistfloat
2024-04-29 21:39:42:007 LL1 LogManager.java:25 look=[48, 12, 12]
2024-04-29 21:39:42:007 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:007 LL1 LogManager.java:25 
DECISION 45 in rule flsize
2024-04-29 21:39:42:007 LL1 LogManager.java:25 look=[48, {12, 48}, {12, 48}]
2024-04-29 21:39:42:007 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:007 LL1 LogManager.java:25 
DECISION 46 in rule inputline
2024-04-29 21:39:42:007 LL1 LogManager.java:25 look=[47, 9]
2024-04-29 21:39:42:007 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:42:007 LL1 LogManager.java:25 
DECISION 47 in rule printstat
2024-04-29 21:39:42:007 LL1 LogManager.java:25 look=[{1, 8, 41, 44..45, 48}, 47]
2024-04-29 21:39:42:007 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:42:007 LL1 LogManager.java:25 
DECISION 48 in rule printstat
2024-04-29 21:39:42:007 LL1 LogManager.java:25 look=[{1, 8, 41, 44..45, 48}, 47]
2024-04-29 21:39:42:007 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:42:007 LL1 LogManager.java:25 
DECISION 49 in rule printstat
2024-04-29 21:39:42:007 LL1 LogManager.java:25 look=[6, 9]
2024-04-29 21:39:42:007 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:42:007 LL1 LogManager.java:25 
DECISION 50 in rule trange
2024-04-29 21:39:42:007 LL1 LogManager.java:25 look=[38, 38, 38]
2024-04-29 21:39:42:007 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:008 LL1 LogManager.java:25 
DECISION 51 in rule expr
2024-04-29 21:39:42:008 LL1 LogManager.java:25 look=[48, 1, 44, 45, 41, 48, 8, 48, 44, 45, 48, 8]
2024-04-29 21:39:42:008 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:008 LL1 LogManager.java:25 
DECISION 52 in rule expr
2024-04-29 21:39:42:008 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2024-04-29 21:39:42:008 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:008 LL1 LogManager.java:25 
DECISION 53 in rule expr
2024-04-29 21:39:42:009 LL1 LogManager.java:25 look=[null, null]
2024-04-29 21:39:42:009 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:009 LL1 LogManager.java:25 
DECISION 54 in rule exprlogic
2024-04-29 21:39:42:009 LL1 LogManager.java:25 look=[48, 44, 45, 48, 4, 8, {1, 8, 41, 44..45, 48}, {1, 8, 41, 44..45, 48}, {1, 8, 41, 44..45, 48}, {1, 8, 41, 44..45, 48}, {1, 8, 41, 44..45, 48}, {1, 8, 41, 44..45, 48}]
2024-04-29 21:39:42:010 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:011 LL1 LogManager.java:25 
DECISION 55 in rule exprlogic
2024-04-29 21:39:42:011 LL1 LogManager.java:25 look=[null, null]
2024-04-29 21:39:42:011 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:011 LL1 LogManager.java:25 
DECISION 56 in rule exprlogic
2024-04-29 21:39:42:011 LL1 LogManager.java:25 look=[null, null]
2024-04-29 21:39:42:011 LL1 LogManager.java:25 LL(1)? false
2024-04-29 21:39:42:011 LL1 LogManager.java:25 
DECISION 57 in rule func
2024-04-29 21:39:42:011 LL1 LogManager.java:25 look=[6, 9]
2024-04-29 21:39:42:011 LL1 LogManager.java:25 LL(1)? true
2024-04-29 21:39:42:179 action-translator LogManager.java:25 translate 
2024-04-29 21:39:42:182 action-translator LogManager.java:25 translate precpred(_ctx, 12)
2024-04-29 21:39:42:183 action-translator LogManager.java:25 translate precpred(_ctx, 11)
2024-04-29 21:39:42:183 action-translator LogManager.java:25 translate precpred(_ctx, 10)
2024-04-29 21:39:42:184 action-translator LogManager.java:25 translate precpred(_ctx, 9)
2024-04-29 21:39:42:184 action-translator LogManager.java:25 translate precpred(_ctx, 8)
2024-04-29 21:39:42:186 action-translator LogManager.java:25 translate precpred(_ctx, 7)
2024-04-29 21:39:42:186 action-translator LogManager.java:25 translate precpred(_ctx, 6)
2024-04-29 21:39:42:188 action-translator LogManager.java:25 translate precpred(_ctx, 12)
2024-04-29 21:39:42:188 action-translator LogManager.java:25 translate precpred(_ctx, 11)
2024-04-29 21:39:42:189 action-translator LogManager.java:25 translate precpred(_ctx, 10)
2024-04-29 21:39:42:189 action-translator LogManager.java:25 translate precpred(_ctx, 9)
2024-04-29 21:39:42:189 action-translator LogManager.java:25 translate precpred(_ctx, 8)
2024-04-29 21:39:42:189 action-translator LogManager.java:25 translate precpred(_ctx, 7)
2024-04-29 21:39:42:189 action-translator LogManager.java:25 translate precpred(_ctx, 6)
2024-04-29 21:39:42:191 action-translator LogManager.java:25 translate 
2024-04-29 21:39:42:194 action-translator LogManager.java:25 translate precpred(_ctx, 8)
2024-04-29 21:39:42:196 action-translator LogManager.java:25 translate precpred(_ctx, 7)
2024-04-29 21:39:42:196 action-translator LogManager.java:25 translate precpred(_ctx, 8)
2024-04-29 21:39:42:196 action-translator LogManager.java:25 translate precpred(_ctx, 7)
